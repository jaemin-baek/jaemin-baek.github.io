<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on 리부트 기술 블로그v2</title><link>https://jaemin-baek.github.io/categories/java/</link><description>Recent content in Java on 리부트 기술 블로그v2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 13 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jaemin-baek.github.io/categories/java/index.xml" rel="self" type="application/rss+xml"/><item><title>[v0.0] Java에서 Exception과 Error의 차이와 명명 이유</title><link>https://jaemin-baek.github.io/post/java_exception_vs_error/</link><pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate><guid>https://jaemin-baek.github.io/post/java_exception_vs_error/</guid><description>&lt;h1 id="java에서-exception과-error의-차이와-명명-이유">Java에서 Exception과 Error의 차이와 명명 이유
&lt;/h1>&lt;p>Java에서 &lt;code>Exception&lt;/code>이라는 용어를 사용한 이유는 단순한 문법의 선택이 아니라 &lt;strong>철학적으로 오류를 &amp;ldquo;예외적인 상황(exceptional situation)&amp;ldquo;으로 분류하려는 시도&lt;/strong>에 뿌리를 두고 있습니다. 이 개념은 C++ 등 객체지향 언어에서 비롯되었고, Java는 이를 명시적 언어 설계 요소로 적극 도입했습니다.&lt;/p>
&lt;hr>
&lt;h2 id="-java가-exception이라는-용어를-채택한-배경">🔍 Java가 &lt;code>Exception&lt;/code>이라는 용어를 채택한 배경
&lt;/h2>&lt;h3 id="1-예외exception와-오류error의-구분">1. 예외(Exception)와 오류(Error)의 구분
&lt;/h3>&lt;p>Java에서는 예외(Exception)와 오류(Error)를 &lt;strong>논리적으로 명확히 구분&lt;/strong>합니다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>구분&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>Java 클래스&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Exception&lt;/strong>&lt;/td>
&lt;td>애플리케이션에서 예측 가능한 문제, 복구 가능&lt;/td>
&lt;td>&lt;code>IOException&lt;/code>, &lt;code>SQLException&lt;/code>, &lt;code>NullPointerException&lt;/code> 등&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Error&lt;/strong>&lt;/td>
&lt;td>시스템 수준의 복구 불가능한 심각한 문제&lt;/td>
&lt;td>&lt;code>OutOfMemoryError&lt;/code>, &lt;code>StackOverflowError&lt;/code> 등&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="2-예외는-비정상적이지만-제어-가능한-흐름">2. 예외는 비정상적이지만 제어 가능한 흐름
&lt;/h3>&lt;ul>
&lt;li>예외(Exception)는 &lt;strong>일반적이지 않은 제어 흐름&lt;/strong>을 나타냅니다.&lt;/li>
&lt;li>Java는 &lt;code>try-catch-finally&lt;/code>를 통해 예외 발생 시에도 &lt;strong>프로그램 흐름을 유지하면서 처리&lt;/strong>할 수 있도록 지원합니다.&lt;/li>
&lt;li>이는 코드 실행 중 조건이 깨졌을 때의 대응 절차를 정의할 수 있게 합니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="3-exception-vs-error-철학">3. Exception vs. Error: 철학
&lt;/h3>&lt;ul>
&lt;li>&lt;code>Exception&lt;/code>: &lt;strong>프로그래머가 처리할 수 있는 예외 상황&lt;/strong>&lt;/li>
&lt;li>&lt;code>Error&lt;/code>: &lt;strong>JVM 또는 시스템 레벨의 문제로, 처리하지 않기를 기대&lt;/strong>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-용어-비교-java-vs-swift-vs-kotlin">📚 용어 비교 (Java vs Swift vs Kotlin)
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>언어&lt;/th>
&lt;th>주요 용어&lt;/th>
&lt;th>처리 방식&lt;/th>
&lt;th>특징&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Java&lt;/td>
&lt;td>&lt;code>Exception&lt;/code>, &lt;code>Error&lt;/code>&lt;/td>
&lt;td>&lt;code>try-catch&lt;/code>&lt;/td>
&lt;td>체크 예외/언체크 예외 구분, 명확한 계층 구조&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Swift&lt;/td>
&lt;td>&lt;code>Error&lt;/code> (Protocol)&lt;/td>
&lt;td>&lt;code>try-catch&lt;/code>, &lt;code>throws&lt;/code>&lt;/td>
&lt;td>대부분 &lt;code>enum&lt;/code>, 구조체 기반, 복구 중심&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kotlin&lt;/td>
&lt;td>&lt;code>Exception&lt;/code>&lt;/td>
&lt;td>&lt;code>try-catch&lt;/code>&lt;/td>
&lt;td>Java 계승, 체크 예외 없음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-결론">✨ 결론
&lt;/h2>&lt;p>Java에서 &lt;code>Exception&lt;/code>이라는 용어는 오류를 &lt;strong>논리적으로 설명 가능한 &amp;lsquo;예외적 사건&amp;rsquo;&lt;/strong> 으로 정의하며, 개발자가 이를 &lt;strong>정제된 방식으로 처리&lt;/strong>하도록 유도하기 위해 선택된 개념입니다.&lt;br>
반면 &lt;code>Error&lt;/code>는 시스템적 결함을 나타내며 &lt;strong>정상적인 흐름에서의 개입을 금지&lt;/strong>하는 철학을 따릅니다.&lt;/p></description></item></channel></rss>