<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IntelliJ on 리부트 기술 블로그v2</title><link>https://jaemin-baek.github.io/tags/intellij/</link><description>Recent content in IntelliJ on 리부트 기술 블로그v2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 13 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jaemin-baek.github.io/tags/intellij/index.xml" rel="self" type="application/rss+xml"/><item><title>[v.0.0] Kotlinx.coroutines 커스텀 수정 후 IntelliJ에서 테스트하는 전체 과정</title><link>https://jaemin-baek.github.io/post/kotlinx-coroutines-local-build-guide/</link><pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate><guid>https://jaemin-baek.github.io/post/kotlinx-coroutines-local-build-guide/</guid><description>&lt;h1 id="kotlinxcoroutines-커스텀-수정-후-intellij에서-테스트하는-전체-과정">Kotlinx.coroutines 커스텀 수정 후 IntelliJ에서 테스트하는 전체 과정
&lt;/h1>&lt;p>Kotlin의 코루틴 라이브러리인 &lt;code>kotlinx.coroutines&lt;/code>의 소스코드를 직접 수정하고, 이를 빌드해서 내가 사용하는 프로젝트에 적용해보는 과정을 정리합니다.&lt;/p>
&lt;hr>
&lt;h2 id="목표">목표
&lt;/h2>&lt;p>수정한 &lt;code>kotlinx.coroutines&lt;/code>를 로컬 빌드한 뒤, 내 IntelliJ 프로젝트에서 직접 불러와 테스트하는 것.&lt;/p>
&lt;hr>
&lt;h2 id="1-github-저장소-클론-및-코드-수정">1. GitHub 저장소 클론 및 코드 수정
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/Kotlin/kotlinx.coroutines.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd kotlinx.coroutines
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>예: &lt;code>Delay.kt&lt;/code>, &lt;code>CancellableContinuation.kt&lt;/code> 등 내부 로직 수정&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-gradle-빌드-수행">2. Gradle 빌드 수행
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./gradlew :kotlinx-coroutines-core:build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>빌드 결과물 위치:&lt;/p>
&lt;pre tabindex="0">&lt;code>build/libs/kotlinx-coroutines-core-1.7.3.jar
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="3-intellij-프로젝트에서-사용하는-방법">3. IntelliJ 프로젝트에서 사용하는 방법
&lt;/h2>&lt;h3 id="방법-1-libs-폴더에-직접-넣기">방법 1: libs 폴더에 직접 넣기
&lt;/h3>&lt;ol>
&lt;li>앱 프로젝트에 &lt;code>libs/&lt;/code> 폴더 생성&lt;/li>
&lt;li>빌드된 JAR 복사:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cp build/libs/kotlinx-coroutines-core-1.7.3.jar &amp;lt;your_project&amp;gt;/libs/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>&lt;code>build.gradle.kts&lt;/code> 혹은 &lt;code>build.gradle&lt;/code>에 추가:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(files(&lt;span style="color:#e6db74">&amp;#34;libs/kotlinx-coroutines-core-1.7.3.jar&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Gradle sync 및 리빌드&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="방법-2-maven-local로-배포">방법 2: Maven Local로 배포
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./gradlew publishToMavenLocal
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>그 후 앱 프로젝트에서 설정:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>repositories {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mavenLocal()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dependencies {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> implementation(&lt;span style="color:#e6db74">&amp;#34;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Maven Local 경로: &lt;code>~/.m2/repository/org/jetbrains/kotlinx/kotlinx-coroutines-core/1.7.3/&lt;/code>&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;h2 id="4-intellij에서-테스트">4. IntelliJ에서 테스트
&lt;/h2>&lt;ul>
&lt;li>디버깅, 로그, 단위 테스트 등을 통해 수정된 코드가 잘 반영되었는지 확인&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="5-참고-팁">5. 참고 팁
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>항목&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>캐시 문제&lt;/td>
&lt;td>&lt;code>./gradlew clean&lt;/code> 후 재시도&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>충돌 검사&lt;/td>
&lt;td>&lt;code>./gradlew dependencies --configuration runtimeClasspath&lt;/code> 로 확인&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>클래스 확인&lt;/td>
&lt;td>IntelliJ에서 &lt;code>.class&lt;/code> 디컴파일 확인 가능&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="정리">정리
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>단계&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>수정&lt;/td>
&lt;td>GitHub 클론 후 코드 변경&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>빌드&lt;/td>
&lt;td>Gradle로 로컬 빌드 or Maven local 배포&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>연결&lt;/td>
&lt;td>JAR 직접 추가 or Maven Local 참조&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>실행&lt;/td>
&lt;td>IntelliJ에서 테스트, 디버깅&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>[v.1.0] Kotlin 코루틴 디버깅 스레드 이름 표시 설정 (with @coroutine#)</title><link>https://jaemin-baek.github.io/post/kotlin-coroutines-debug-thread-name/</link><pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate><guid>https://jaemin-baek.github.io/post/kotlin-coroutines-debug-thread-name/</guid><description>&lt;h1 id="kotlin-코루틴-디버깅-스레드-이름-표시-설정-with-coroutine">Kotlin 코루틴 디버깅 스레드 이름 표시 설정 (with @coroutine#)
&lt;/h1>&lt;p>일반적으로 Kotlin 코루틴에서 &lt;code>Thread.currentThread().name&lt;/code>을 출력했을 때, &lt;code>main @coroutine#1&lt;/code> 같은 형식이 나오는데 그냥 &lt;code>main&lt;/code>만 나오는 이유는 &lt;strong>JVM 디버깅 옵션 설정 여부&lt;/strong> 때문입니다.&lt;/p>
&lt;hr>
&lt;h2 id="문제-상황">문제 상황
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() = runBlocking {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#a6e22e">Thread&lt;/span>.currentThread().name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>출력 결과:&lt;/p>
&lt;pre tabindex="0">&lt;code>main
&lt;/code>&lt;/pre>&lt;p>원래는 @coroutine 수식어가 붙어야 함&lt;/p>
&lt;pre tabindex="0">&lt;code>main @coroutine#1
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="원인">원인
&lt;/h2>&lt;p>Kotlinx Coroutines는 디버깅 용도로 &lt;strong>스레드 이름에 &lt;code>@coroutine#N&lt;/code> 수식어&lt;/strong>를 붙일 수 있습니다.&lt;br>
이 기능은 기본적으로 비활성화되어 있으며, JVM 옵션을 통해 활성화할 수 있습니다.&lt;/p>
&lt;hr>
&lt;h2 id="intellij에서-설정하는-방법">IntelliJ에서 설정하는 방법
&lt;/h2>&lt;ol>
&lt;li>&lt;strong>Run &amp;gt; Edit Configurations&amp;hellip;&lt;/strong> 메뉴로 이동&lt;/li>
&lt;li>실행할 애플리케이션 선택&lt;/li>
&lt;li>&lt;strong>VM Options&lt;/strong> 항목에 아래 입력 추가:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>-Dkotlinx.coroutines.debug=on
&lt;/code>&lt;/pre>&lt;ol start="4">
&lt;li>실행하면 결과:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>main @coroutine#1
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="gradle-테스트에서도-적용하기-선택">Gradle 테스트에서도 적용하기 (선택)
&lt;/h2>&lt;p>&lt;code>build.gradle.kts&lt;/code> 또는 &lt;code>build.gradle&lt;/code>에 다음을 추가:&lt;/p>
&lt;h3 id="kotlin-dsl-buildgradlekts">Kotlin DSL (&lt;code>build.gradle.kts&lt;/code>)
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>tasks.withType&amp;lt;Test&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jvmArgs(&lt;span style="color:#e6db74">&amp;#34;-Dkotlinx.coroutines.debug=on&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="groovy-dsl-buildgradle">Groovy DSL (&lt;code>build.gradle&lt;/code>)
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-groovy" data-lang="groovy">&lt;span style="display:flex;">&lt;span>tasks&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">withType&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Test&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jvmArgs &lt;span style="color:#e6db74">&amp;#34;-Dkotlinx.coroutines.debug=on&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="결과-확인">결과 확인
&lt;/h2>&lt;p>이제 코루틴이 실행되는 스레드 이름에는 다음처럼 &lt;strong>코루틴 ID가 수식어로 표시&lt;/strong>됩니다.&lt;/p>
&lt;pre tabindex="0">&lt;code>DefaultDispatcher-worker-1 @coroutine#2
main @coroutine#1
&lt;/code>&lt;/pre>&lt;p>이런 수식어는 &lt;strong>디버깅과 로깅에 매우 유용&lt;/strong>합니다.&lt;/p>
&lt;hr>
&lt;h2 id="요약">요약
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>항목&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>목적&lt;/td>
&lt;td>코루틴 실행 스레드 이름에 &lt;code>@coroutine#&lt;/code> ID 붙이기&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>방법&lt;/td>
&lt;td>&lt;code>-Dkotlinx.coroutines.debug=on&lt;/code> JVM 옵션 설정&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IntelliJ&lt;/td>
&lt;td>Run Configurations &amp;gt; VM options&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Gradle 테스트&lt;/td>
&lt;td>&lt;code>tasks.withType&amp;lt;Test&amp;gt; { jvmArgs(...) }&lt;/code> 설정&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>실제 디버깅 중이라면 이 옵션을 항상 켜두는 것을 추천합니다.&lt;/p></description></item></channel></rss>