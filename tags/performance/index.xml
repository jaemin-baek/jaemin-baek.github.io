<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Performance on 리부트 기술 블로그v2</title><link>https://jaemin-baek.github.io/tags/performance/</link><description>Recent content in Performance on 리부트 기술 블로그v2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 15 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jaemin-baek.github.io/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>Android UI 성능 저하 요인: Frame Skipping, Jank, GPU Overdraw</title><link>https://jaemin-baek.github.io/post/android_performance_issues/</link><pubDate>Sat, 15 Mar 2025 00:00:00 +0000</pubDate><guid>https://jaemin-baek.github.io/post/android_performance_issues/</guid><description>&lt;h1 id="android-ui-성능-저하-요인-frame-skipping-jank-gpu-overdraw">Android UI 성능 저하 요인: Frame Skipping, Jank, GPU Overdraw
&lt;/h1>&lt;p>Android에서 부드러운 UI와 애니메이션을 구현하기 위해서는 **60FPS(또는 그 이상)**의 일정한 프레임 유지가 중요합니다. 하지만 다양한 원인으로 인해 &lt;strong>프레임이 건너뛰거나 끊기는 현상&lt;/strong>이 발생할 수 있습니다.&lt;/p>
&lt;p>이 글에서는 UI 렌더링 성능을 저하시킬 수 있는 대표적인 요인인 &lt;strong>Frame Skipping&lt;/strong>, &lt;strong>Jank&lt;/strong>, &lt;strong>GPU Overdraw&lt;/strong>를 살펴봅니다.&lt;/p>
&lt;hr>
&lt;h2 id="1-frame-skipping-프레임-스킵">1. Frame Skipping (프레임 스킵)
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Frame Skipping&lt;/strong>은 VSync 타이밍(예: 16.6ms)을 넘겨 GPU가 프레임을 제때 제출하지 못할 때 발생합니다.&lt;/li>
&lt;li>결과적으로 해당 프레임은 건너뛰어지고, 애니메이션이 순간적으로 끊긴 것처럼 보입니다.&lt;/li>
&lt;/ul>
&lt;h3 id="원인">원인
&lt;/h3>&lt;ul>
&lt;li>레이아웃 연산 과다 (&lt;code>onLayout&lt;/code>, &lt;code>onMeasure&lt;/code>)&lt;/li>
&lt;li>복잡한 View 계층 또는 ConstraintLayout 오용&lt;/li>
&lt;li>무거운 이미지 디코딩, 비효율적 메모리 사용&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-jank-잭-or-잔커">2. Jank (잭 or 잔커)
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Jank&lt;/strong>는 프레임 간 시간 간격이 일정하지 않아서 눈에 띄게 화면이 &lt;strong>끊기는 듯한 현상&lt;/strong>&lt;/li>
&lt;li>Frame Skipping이 누적되면 발생&lt;/li>
&lt;li>Jank는 UX에서 매우 민감하게 인식됨&lt;/li>
&lt;/ul>
&lt;h3 id="지표로-확인">지표로 확인
&lt;/h3>&lt;ul>
&lt;li>&lt;code>FrameTime &amp;gt; 16.6ms&lt;/code> → 하나의 Jank&lt;/li>
&lt;li>연속된 프레임 지연 → 체감 끊김이 심해짐&lt;/li>
&lt;/ul>
&lt;h3 id="해결-방법">해결 방법
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>메인 스레드에서의 무거운 연산 제거&lt;/strong>&lt;/li>
&lt;li>&lt;strong>레이아웃 단순화&lt;/strong>&lt;/li>
&lt;li>Glide, Coil 등 &lt;strong>비동기 이미지 로딩 라이브러리 사용&lt;/strong>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-gpu-overdraw">3. GPU Overdraw
&lt;/h2>&lt;ul>
&lt;li>GPU가 동일한 픽셀을 여러 번 그리는 현상&lt;/li>
&lt;li>예: 배경 → 반투명 패널 → 버튼 → 텍스트 → 그림자 등 같은 위치 픽셀을 반복 렌더링&lt;/li>
&lt;/ul>
&lt;h3 id="overdraw-레벨">Overdraw 레벨
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>색상 (디버깅 모드)&lt;/th>
&lt;th>의미&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>파란색&lt;/td>
&lt;td>1회&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>초록색&lt;/td>
&lt;td>2회&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>분홍색&lt;/td>
&lt;td>3회&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>빨간색&lt;/td>
&lt;td>4회 이상 (심각)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="해결-방법-1">해결 방법
&lt;/h3>&lt;ul>
&lt;li>배경 중복 제거 (e.g. &lt;code>android:background&lt;/code> 대신 테마 활용)&lt;/li>
&lt;li>겹치는 View 계층 최소화&lt;/li>
&lt;li>&lt;code>ConstraintLayout&lt;/code>에서 투명한 View 중복 피하기&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="4-디버깅-도구-요약">4. 디버깅 도구 요약
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>도구&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>adb shell dumpsys gfxinfo&lt;/code>&lt;/td>
&lt;td>프레임 시간, Jank 통계&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Android Studio Profiler&lt;/td>
&lt;td>CPU, GPU, 메모리 분석&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>GPU Overdraw&lt;/code> (개발자 옵션)&lt;/td>
&lt;td>픽셀 과다 그리기 시각화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Layout Inspector&lt;/code>&lt;/td>
&lt;td>뷰 계층 구조 분석&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="결론">결론
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>성능 저하 요소&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>해결 전략&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Frame Skipping&lt;/td>
&lt;td>프레임 제출 실패&lt;/td>
&lt;td>렌더링 병목 제거&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Jank&lt;/td>
&lt;td>불규칙한 프레임 타이밍&lt;/td>
&lt;td>View 최적화, 스레드 분리&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GPU Overdraw&lt;/td>
&lt;td>중복 픽셀 렌더링&lt;/td>
&lt;td>View 계층 간소화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>안드로이드 UI 성능은 단순히 코드를 잘 짜는 것만으로는 부족합니다. &lt;strong>눈에 보이지 않는 렌더링 비용을 인식하고 최적화하는 시야가 중요&lt;/strong>합니다.&lt;/p>
&lt;p>다음 글에서는 &lt;code>Display Refresh Rate&lt;/code>, &lt;code>Adaptive Sync&lt;/code>, &lt;code>Frame Pacing&lt;/code>과 같은 &lt;strong>고주사율 디스플레이 대응 전략&lt;/strong>을 다뤄보겠습니다.&lt;/p></description></item></channel></rss>