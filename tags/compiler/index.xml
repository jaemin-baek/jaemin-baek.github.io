<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compiler on 리부트 기술 블로그v2</title><link>https://jaemin-baek.github.io/tags/compiler/</link><description>Recent content in Compiler on 리부트 기술 블로그v2</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://jaemin-baek.github.io/tags/compiler/index.xml" rel="self" type="application/rss+xml"/><item><title>Kotlin 언어 기능 제안 및 코드 기여 실전 가이드</title><link>https://jaemin-baek.github.io/post/kotlincontributionguide/</link><pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate><guid>https://jaemin-baek.github.io/post/kotlincontributionguide/</guid><description>&lt;h1 id="kotlin-언어-기능-제안-및-코드-기여-실전-가이드">Kotlin 언어 기능 제안 및 코드 기여 실전 가이드
&lt;/h1>&lt;p>이 문서는 Kotlin 언어에 새로운 기능을 직접 제안하고, 설계하고, 컴파일러 코드까지 기여하는 전체 과정을 다룹니다. 단순한 이슈 제기를 넘어서 실제 &lt;strong>KEEP 문서 작성부터 parser 수정, IR 처리, 테스트 작성, PR 제출까지&lt;/strong> 모든 단계를 실습 중심으로 안내합니다.&lt;/p>
&lt;hr>
&lt;h2 id="kotlin-컴파일-과정-요약-psi--fir--ir--bytecode">Kotlin 컴파일 과정 요약: PSI → FIR → IR → Bytecode
&lt;/h2>&lt;h3 id="psi-program-structure-interface">PSI (Program Structure Interface)
&lt;/h3>&lt;ul>
&lt;li>Kotlin 코드의 문법 구조를 표현하는 트리 (구문 트리)&lt;/li>
&lt;li>파서(parser)가 소스 코드를 읽고 생성&lt;/li>
&lt;/ul>
&lt;h3 id="fir-front-end-intermediate-representation">FIR (Front-end Intermediate Representation)
&lt;/h3>&lt;ul>
&lt;li>PSI를 기반으로 구성된 추상적이고 정형화된 표현식 트리&lt;/li>
&lt;li>타입 추론, 제어 흐름 해석, 스코프 관리 등을 수행&lt;/li>
&lt;/ul>
&lt;h3 id="ir-intermediate-representation">IR (Intermediate Representation)
&lt;/h3>&lt;ul>
&lt;li>FIR을 기반으로 백엔드 처리용으로 변환한 중간 표현&lt;/li>
&lt;li>JVM/JS/Native 공통 처리 가능&lt;/li>
&lt;li>최적화 및 로워링 대상&lt;/li>
&lt;/ul>
&lt;h3 id="bytecode-jvm">Bytecode (JVM)
&lt;/h3>&lt;ul>
&lt;li>최종적으로 IR이 JVM 바이트코드로 변환되어 &lt;code>.class&lt;/code>로 출력됨&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="실전-시나리오-guard-구문-제안-및-구현하기">실전 시나리오: &lt;code>guard&lt;/code> 구문 제안 및 구현하기
&lt;/h2>&lt;p>&lt;code>guard (조건) else { ... }&lt;/code> 문법은 가독성이 높고 Swift와 유사한 조기 탈출(early exit) 구문입니다. Kotlin에 이를 도입하는 과정을 처음부터 끝까지 따라가봅니다.&lt;/p>
&lt;h3 id="step-1-아이디어-공유-및-커뮤니티-피드백">Step 1. 아이디어 공유 및 커뮤니티 피드백
&lt;/h3>&lt;ul>
&lt;li>Kotlin Slack &lt;code>#language-proposals&lt;/code>에 아래 내용 공유&lt;/li>
&lt;li>&lt;code>discuss.kotlinlang.org&lt;/code>에도 같은 아이디어를 올려 반응 확인&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Kotlin에 Swift 스타일의 &lt;code>guard (condition) else {}&lt;/code> 구문을 도입하고 싶습니다. &lt;code>if (!condition) return&lt;/code> 보다 읽기 쉽고 명확합니다. KEEP 작성 전에 커뮤니티 의견을 듣고 싶습니다.&lt;/p>&lt;/blockquote>
&lt;h3 id="step-2-keep-문서-작성-및-제출">Step 2. KEEP 문서 작성 및 제출
&lt;/h3>&lt;p>KEEP(Kotlin Evolution and Enhancement Process)은 Kotlin 언어의 새로운 기능을 제안하고 문서화하는 공식 절차입니다.&lt;/p>
&lt;h4 id="작성-위치">작성 위치:
&lt;/h4>&lt;ol>
&lt;li>GitHub 저장소: &lt;a class="link" href="https://github.com/Kotlin/KEEP" target="_blank" rel="noopener"
>https://github.com/Kotlin/KEEP&lt;/a>&lt;/li>
&lt;li>본인 계정으로 Fork 후 Clone&lt;/li>
&lt;li>&lt;code>proposals/&lt;/code> 디렉토리에 Markdown 파일 생성 (예: &lt;code>guard-expression.md&lt;/code>)&lt;/li>
&lt;/ol>
&lt;h4 id="문서-기본-템플릿-구성">문서 기본 템플릿 구성:
&lt;/h4>&lt;ul>
&lt;li>&lt;code>Summary&lt;/code>: 기능 요약&lt;/li>
&lt;li>&lt;code>Motivation&lt;/code>: 왜 필요한가?&lt;/li>
&lt;li>&lt;code>Syntax&lt;/code>: 문법 예시&lt;/li>
&lt;li>&lt;code>Semantics&lt;/code>: 내부적으로 어떻게 동작하는가&lt;/li>
&lt;li>&lt;code>Compatibility&lt;/code>: 기존 코드와 충돌 여부&lt;/li>
&lt;li>&lt;code>Implementation&lt;/code>: Token → PSI → FIR → IR 흐름&lt;/li>
&lt;li>&lt;code>Alternatives&lt;/code>: 기존 방식과의 비교&lt;/li>
&lt;/ul>
&lt;h4 id="github에-pr-제출하기">GitHub에 PR 제출하기:
&lt;/h4>&lt;ol>
&lt;li>파일 작성 후 커밋 및 본인 원격 저장소에 Push&lt;/li>
&lt;li>GitHub 웹에서 Fork 저장소 방문 → &amp;lsquo;Compare &amp;amp; Pull Request&amp;rsquo; 클릭&lt;/li>
&lt;li>base repository: &lt;code>Kotlin/KEEP&lt;/code>, base: &lt;code>master&lt;/code>, head: 본인 브랜치&lt;/li>
&lt;li>제목: &lt;code>Propose: guard keyword for early return&lt;/code>&lt;/li>
&lt;li>설명란에 문서 내용 요약 작성&lt;/li>
&lt;/ol>
&lt;h4 id="slack-공유-예시">Slack 공유 예시:
&lt;/h4>&lt;p>Slack &lt;code>#language-proposals&lt;/code> 채널에서 아래와 같이 알립니다:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>Hi all 👋
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I&amp;#39;ve drafted a KEEP proposal introducing a new &lt;span style="color:#e6db74">`guard (cond) else {}`&lt;/span> syntax for early exits, similar to Swift.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PR link: https://github.com/Kotlin/KEEP/pull/XXX
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Looking forward to your feedback, especially regarding parser and FIR/IR feasibility.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CC: @elizarov @ilya-g
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Slack은 비공식 토론의 중심이며, 리뷰 반영 속도를 높이는 데 효과적입니다.&lt;/p>
&lt;h3 id="step-3-parser-수정-jettokens-kotlinparser">Step 3. parser 수정 (JetTokens, KotlinParser)
&lt;/h3>&lt;ul>
&lt;li>&lt;code>GUARD_KEYWORD&lt;/code>, &lt;code>ELSE_KEYWORD&lt;/code> 추가&lt;/li>
&lt;li>&lt;code>guard (condition) else { block }&lt;/code>를 PSI 트리로 파싱되도록 구현&lt;/li>
&lt;/ul>
&lt;h3 id="step-4-fir-구조-정의">Step 4. FIR 구조 정의
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FirGuardExpressionImpl&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> condition: FirExpression,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> elseBlock: FirBlock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) : FirExpression()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>FIR 트리에 새 노드로 포함&lt;/li>
&lt;/ul>
&lt;h3 id="step-5-ir-변환-로직-작성">Step 5. IR 변환 로직 작성
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">visitGuardExpression&lt;/span>(expression: IrGuardExpression): IrStatement {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> irIfThenElse(&lt;span style="color:#f92672">..&lt;/span>.)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>if (!cond) { block }&lt;/code> 로 변환&lt;/li>
&lt;/ul>
&lt;h3 id="step-6-테스트-코드-추가">Step 6. 테스트 코드 추가
&lt;/h3>&lt;ul>
&lt;li>위치: &lt;code>compiler/tests-spec/testData/guard/Basic.kt&lt;/code>&lt;/li>
&lt;li>케이스: 조건 실패 시 블록 실행 여부 확인&lt;/li>
&lt;/ul>
&lt;h3 id="step-7-pull-request-제출">Step 7. Pull Request 제출
&lt;/h3>&lt;ul>
&lt;li>브랜치: &lt;code>feature/guard-keyword&lt;/code>&lt;/li>
&lt;li>제목: &lt;code>Add guard keyword expression&lt;/code>&lt;/li>
&lt;li>설명:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>This PR introduces a new syntax for early exit using `guard (cond) else {}`
- Added GUARD and ELSE tokens
- Implemented parser rule
- Introduced FirGuardExpression
- Lowered to standard if-not-else IR
- Added test cases
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>공유: Slack &lt;code>#language-proposals&lt;/code>, reviewer 지정 요청&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="step-8-jetbrains-컨택-및-리뷰어-안내">Step 8. JetBrains 컨택 및 리뷰어 안내
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>이름&lt;/th>
&lt;th>역할&lt;/th>
&lt;th>GitHub ID&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Roman Elizarov&lt;/td>
&lt;td>Kotlin 리드 디자이너, 코루틴 설계자&lt;/td>
&lt;td>@elizarov&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ilya Gorbunov&lt;/td>
&lt;td>Kotlin compiler contributor&lt;/td>
&lt;td>@ilya-g&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Svetlana Isakova&lt;/td>
&lt;td>Kotlin developer advocate&lt;/td>
&lt;td>@svetlanak999&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Egor Tolstoy&lt;/td>
&lt;td>Kotlin compiler + IntelliJ integration&lt;/td>
&lt;td>@egor-tolstoy&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>PR 후 Slack &lt;code>#language-proposals&lt;/code>에서 &lt;code>@멘션&lt;/code>하여 리뷰 요청&lt;/li>
&lt;li>필요 시 GitHub에서 &lt;code>ping&lt;/code>하여 응답 유도&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="step-9-기여-후-유지-관리와-후속-대응">Step 9. 기여 후 유지 관리와 후속 대응
&lt;/h2>&lt;ul>
&lt;li>기능이 릴리스 브랜치에 포함될 때까지 추적&lt;/li>
&lt;li>실험적 기능이면 opt-in 애노테이션 유지 필요&lt;/li>
&lt;li>&lt;code>kotlin-web-site&lt;/code> 문서 기여 필요&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="step-10-실제-기여-예시-탐색">Step 10. 실제 기여 예시 탐색
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/JetBrains/kotlin/pull/4423" target="_blank" rel="noopener"
>context receivers PR&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/JetBrains/kotlin/pull/3613" target="_blank" rel="noopener"
>sealed interfaces PR&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="step-11-공식-문서화-저장소-기여">Step 11. 공식 문서화 저장소 기여
&lt;/h2>&lt;ul>
&lt;li>저장소: &lt;a class="link" href="https://github.com/JetBrains/kotlin-web-site" target="_blank" rel="noopener"
>https://github.com/JetBrains/kotlin-web-site&lt;/a>&lt;/li>
&lt;li>위치: &lt;code>pages/docs&lt;/code>&lt;/li>
&lt;li>문서 예시:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## guard (condition) else {}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Introduced in Kotlin X.X
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A new control-flow expression that simplifies early exit patterns.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>```kotlin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fun example(x: Int?) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> guard (x != null) else {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&amp;#34;Invalid input&amp;#34;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>
---
## 마무리 요약
| 단계 | 설명 |
|------|------|
| 1 | 아이디어 제안 및 커뮤니티 피드백 |
| 2 | KEEP 작성 및 PR 제출 |
| 3 | parser/lexer 수정 |
| 4 | FIR 구조 반영 |
| 5 | IR 변환 구현 |
| 6 | 테스트 작성 |
| 7 | Pull Request 제출 및 리뷰 대응 |
| 8 | JetBrains 팀과 협업 및 피드백 수용 |
| 9 | 기능 릴리스 전후 지속적 기여 |
| 10 | 실제 사례 학습 |
| 11 | 공식 문서화 기여 완료 |
&lt;/code>&lt;/pre></description></item></channel></rss>